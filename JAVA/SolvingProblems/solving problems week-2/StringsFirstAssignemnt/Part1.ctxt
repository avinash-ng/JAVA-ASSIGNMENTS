#BlueJ class context
comment0.target=Part1
comment0.text=\n\ Write\ a\ description\ of\ class\ Part1\ here.\n\n\ @author\ (your\ name)\n\ @version\ (a\ version\ number\ or\ a\ date)\n\ \n\ \nCreate\ a\ new\ Java\ Class\ named\ Part1.\ The\ following\ methods\ go\ in\ this\ class.\n\n3.Write\ the\ method\ findSimpleGene\ that\ has\ one\ String\ parameter\ dna,\ representing\ a\ string\ of\ DNA.\ This\ method\ does\ the\ following\:\n\nFinds\ the\ index\ position\ of\ the\ start\ codon\ \u201CATG\u201D.\ If\ there\ is\ no\ \u201CATG\u201D,\ return\ the\ empty\ string.\nFinds\ the\ index\ position\ of\ the\ first\ stop\ codon\ \u201CTAA\u201D\ appearing\ after\ the\ \u201CATG\u201D\ that\ was\ found.\ If\ there\ is\ no\ such\ \u201CTAA\u201D,\ return\ the\ empty\ string.\nIf\ the\ length\ of\ the\ substring\ between\ the\ \u201CATG\u201D\ and\ \u201CTAA\u201D\ is\ a\ multiple\ of\ 3,\ then\ return\ the\ substring\ that\ starts\ with\ that\ \u201CATG\u201D\ and\ ends\ with\ that\ \u201CTAA\u201D.\n4.\ Write\ the\ void\ method\ testSimpleGene\ that\ has\ no\ parameters.\ You\ should\ create\ five\ DNA\ strings.\ The\ strings\ should\ have\ specific\ test\ cases,\ such\ as\:\ DNA\ with\ no\ \u201CATG\u201D,\ DNA\ with\ no\ \u201CTAA\u201D,\ DNA\ with\ no\ \u201CATG\u201D\ or\ \u201CTAA\u201D,\ DNA\ with\ ATG,\ TAA\ and\ the\ substring\ between\ them\ is\ a\ multiple\ of\ 3\ (a\ gene),\ and\ DNA\ with\ ATG,\ TAA\ and\ the\ substring\ between\ them\ is\ not\ a\ multiple\ of\ 3.\ For\ each\ DNA\ string\ you\ should\:\n\nPrint\ the\ DNA\ string.\nSee\ if\ there\ is\ a\ gene\ by\ calling\ findSimpleGene\ with\ this\ string\ as\ the\ parameter.\ If\ a\ gene\ exists\ following\ our\ algorithm\ above,\ then\ print\ the\ gene,\ otherwise\ print\ the\ empty\ string.\n
comment1.params=dna
comment1.target=java.lang.String\ findSimpleGene(java.lang.String)
comment2.params=
comment2.target=void\ testSimpleGene()
numComments=3
